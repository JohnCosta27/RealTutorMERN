1.1 Systems architecture
- the purpose of the CPU
- Von Neumann architecture
= MAR (Memory Address Register)
= MDR (Memory Data Register)
= Program Counter
= Accumulator
- common CPU components and their function
= ALU (Arithmetic Logic Unit)
= CU (Control Unit)
= Cache
- the function of the CPU as fetch and execute instructions stored in memory
- how common characteristics of CPUs affect their performance
= clock speed
= cache size
= number of cores
- embedded systems
= purpose of embedded systems
= examples of embedded sytems.
nnnn
1.2 Memory
- the difference between RAM and ROM
- the purpose of ROM in a computer system
- the purpose of RAM in a computer system
- the need for virtual memory
- flash memory.
nnnn
1.3 Storage
- the need for secondary storage
- data capacity and calculation of data capacity requirements
- common types of storage
= optical
= magnetic
= solid state
- suitable storage devices and storage media for a given application.
= capacity
= speed
= portability
= durability
= reliability
= cost.
nnnn
1.4 Wired and wireless networks
- types of networks
= LAN (Local Area Network)
= WAN (Wide Area Network)
- factors that affect the performance of networks
- the different roles of computers in a client-server and a peer-to-peer network
- the hardware needed to connect stand-alone computers into a Local Area Network
= wireless access points
= routers/switches
= NIC (Network Interface Controller/Card)
= transmission media
- the internet as a worldwide collection of computer networks
= DNS (Domain Name Server)
= hosting
= the cloud
- the concept of virtual networks.
nnnn
1.5 Network topologies, protocols and layers
- star and mesh network topologies
- Wifi
= frequency and channels
= encryption
- ethernet
- the uses of IP addressing, MAC addressing, and protocols including
= TCP/IP (Transmission Control Protocol/Internet Protocol)
= HTTP (Hyper Text Transfer Protocol)
= HTTPS (Hyper Text Transfer Protocol Secure)
= FTP (File Transfer Protocol)
= POP (Post Office Protocol)
= IMAP (Internet Message Access Protocol)
= SMTP (Simple Mail Transfer Protocol)
- the concept of layers
- packet switching.
nnnn
1.6 System security
- forms of attack
- threats posed to networks
= malware
= phishing
= people as the ‘weak point’ in secure systems (social engineering)
= brute force attacks
= denial of service attacks
= data interception and theft
= the concept of SQL injection
= poor network policy
- identifying and preventing vulnerabilities
= penetration testing
= network forensics
= network policies
= anti-malware software
= firewalls
= user access levels
= passwords
= encryption.
nnnn
1.7 The purpose and functionality of systems software
- operating systems
= user interface
= memory management/multitasking
= peripheral management and drivers
= user management
= file management
- utility system software
= encryption software
= defragmentation
= data compression
= the role and methods of backup
nnnn
1.8 Ethical, legal, cultural and environmental concerns
- how to investigate and discuss Computer Science technologies while considering
= ethical issues
= legal issues
= cultural issues
= environmental issues.
= privacy issues.
- how key stakeholders are affected by technologies
- environmental impact of Computer Science
- cultural implications of Computer Science
- open source vs proprietary software
- legislation relevant to Computer Science
= The Data Protection Act 1998
= Computer Misuse Act 1990
= Copyright Designs and Patents Act 1988
= Creative Commons Licensing
= Freedom of Information Act 2000.
nnnn
2.1 Algorithms
- computational thinking:
= abstraction
= decomposition
= algorithmic thinking
- standard searching algorithms:
= binary search
= linear search
- standard sorting algorithms:
= bubble sort
= merge sort
= insertion sort
- how to produce algorithms using:
= pseudocode
= using flow diagrams
- interpret, correct or complete algorithms. 
nnnn
2.2 Programming techniques
- the use of variables, constants, operators, inputs, outputs and assignments
- the use of the three basic programming constructs used to control the flow of a program:
= sequence
= selection
= iteration (count and condition controlled loops)
- the use of basic string manipulation
- the use of basic file handling operations:
= open
= read
= write
= close
- the use of records to store data
- the use of SQL to search for data
- the use of arrays (or equivalent) when solving problems, including both one and two dimensional arrays
- how to use sub programs (functions and procedures) to produce structured code
- the use of data types:
= integer
= real
= Boolean
= character and string
= casting
- the common arithmetic operators
- the common Boolean operators.
nnnn
2.3 Producing robust programs
- defensive design considerations:
= input sanitisation/validation
= planning for contingencies
= anticipating misuse
= authentication
- maintainability:
= comments
= indentation
- the purpose of testing
- types of testing:
= iterative
= final/terminal
- how to identify syntax and logic errors
- selecting and using suitable test data. 
nnnn
2.4 Computational logic
- why data is represented in computer systems in binary form
- simple logic diagrams using the operations AND, OR and NOT
- truth tables
- combining Boolean operators using AND, OR and NOT to two levels
- applying logical operators in appropriate truth tables to solve problems
- applying computing-related mathematics:
= +
= –
= /
= *
= Exponentiation (^)
= MOD
= DIV
nnnn
2.5 Translators and facilities of languages
- characteristics and purpose of different levels of programming language, including low level languages
- the purpose of translators
- the characteristics of an assembler, a compiler and an interpreter
- common tools and facilities available in an integrated development environment (IDE):
= editors
= error diagnostics
= run-time environment
= translators.
nnnn
2.6 Data representation
- bit, nibble, byte, kilobyte, megabyte, gigabyte, terabyte, petabyte
- how data needs to be converted into a binary format to be processed by a computer.
- how to convert positive denary whole numbers (0–255) into 8 bit binary numbers and vice versa
- how to add two 8 bit binary integers and explain overflow errors which may occur
- binary shifts
- how to convert positive denary whole numbers (0–255) into 2 digit hexadecimal numbers and vice
- how to convert from binary to hexadecimal equivalents and vice versa
- check digits.
- the use of binary codes to represent characters
- the term ‘character-set’
- how an image is represented as a series of pixels represented in binary
- metadata included in the file
- the effect of colour depth and resolution on the size of an image file.
- how sound can be sampled and stored in digital form
- how sampling intervals and other factors affect the size of a sound file and the quality of its playback:
= sample size
= bit rate
= sampling frequency.
- need for compression
- types of compression:
= lossy
= lossless.
nnnn