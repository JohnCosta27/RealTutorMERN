[{"/home/johnc/Projects/RealTutorMERN/client/src/index.js":"1","/home/johnc/Projects/RealTutorMERN/client/src/theme.js":"2","/home/johnc/Projects/RealTutorMERN/client/src/reportWebVitals.js":"3","/home/johnc/Projects/RealTutorMERN/client/src/components/app/App.js":"4","/home/johnc/Projects/RealTutorMERN/client/src/components/pages/StudentDashboard.js":"5","/home/johnc/Projects/RealTutorMERN/client/src/components/general/CustomTextField.js":"6","/home/johnc/Projects/RealTutorMERN/client/src/components/general/LeftDrawer.js":"7","/home/johnc/Projects/RealTutorMERN/client/src/components/FeatureComponents/PlanLesson.js":"8","/home/johnc/Projects/RealTutorMERN/client/src/components/FeatureComponents/Dashboard.js":"9","/home/johnc/Projects/RealTutorMERN/client/src/components/FeatureComponents/AddReport.js":"10","/home/johnc/Projects/RealTutorMERN/client/src/components/FeatureComponents/Progress.js":"11","/home/johnc/Projects/RealTutorMERN/client/src/components/FeatureComponents/StudentLessons.js":"12","/home/johnc/Projects/RealTutorMERN/client/src/components/pages/Login.js":"13","/home/johnc/Projects/RealTutorMERN/client/src/components/general/Progress.js":"14","/home/johnc/Projects/RealTutorMERN/client/src/components/general/Lessons.js":"15"},{"size":515,"mtime":1617026007422,"results":"16","hashOfConfig":"17"},{"size":599,"mtime":1617572148282,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1615413031095,"results":"19","hashOfConfig":"17"},{"size":678,"mtime":1617574450254,"results":"20","hashOfConfig":"17"},{"size":3439,"mtime":1617574294751,"results":"21","hashOfConfig":"17"},{"size":1812,"mtime":1615413031095,"results":"22","hashOfConfig":"17"},{"size":2633,"mtime":1617574728687,"results":"23","hashOfConfig":"17"},{"size":5705,"mtime":1617572363507,"results":"24","hashOfConfig":"17"},{"size":3861,"mtime":1617574825594,"results":"25","hashOfConfig":"17"},{"size":7061,"mtime":1617572312218,"results":"26","hashOfConfig":"17"},{"size":2612,"mtime":1617572490533,"results":"27","hashOfConfig":"17"},{"size":3312,"mtime":1617574613771,"results":"28","hashOfConfig":"17"},{"size":2245,"mtime":1617574851443,"results":"29","hashOfConfig":"17"},{"size":1162,"mtime":1615930343931,"results":"30","hashOfConfig":"17"},{"size":1119,"mtime":1617395266492,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"chzs4",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/johnc/Projects/RealTutorMERN/client/src/index.js",[],["70","71"],"/home/johnc/Projects/RealTutorMERN/client/src/theme.js",[],"/home/johnc/Projects/RealTutorMERN/client/src/reportWebVitals.js",[],"/home/johnc/Projects/RealTutorMERN/client/src/components/app/App.js",[],"/home/johnc/Projects/RealTutorMERN/client/src/components/pages/StudentDashboard.js",[],"/home/johnc/Projects/RealTutorMERN/client/src/components/general/CustomTextField.js",["72"],"import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles, createMuiTheme } from '@material-ui/core/styles';\n\nfunction CustomTextField(props) {\n\n    const useStyles = makeStyles(theme => (\n        {\n            customTextField: {\n                '& .MuiInputBase-input': {\n                    color: theme.palette.cards\n                },\n                '& label': {\n                    color: theme.palette.cards\n                },\n                '& label.Mui-focused': {\n                    color: theme.palette.cards\n                },\n                '& .MuiInput-underline:after': {\n                    color: theme.palette.cards\n                },\n                '& .MuiOutlinedInput-root': {\n                    '& fieldset': {\n                        borderColor: theme.palette.cards\n                    },\n                    '&:hover fieldset': {\n                        borderColor: theme.palette.cards\n                    },\n                    '&.Mui-focused fieldset': {\n                        borderColor: theme.palette.cards\n                    },\n                },\n            },\n            multilineColor:{\n                color: theme.palette.cards\n            }\n        }));\n        \n        const classes = useStyles();\n        \n        return(\n            <TextField \n            variant=\"filled\" \n            className={classes.customTextField}\n            label={props.label}\n            onChange={props.onChange}\n            error={props.error}\n            onFocus={props.onFocus}\n            InputProps={{\n                className: classes.multilineColor\n              }}\n            type={props.type}>\n            Hello there\n            </TextField>\n            )\n            \n        }\n        \n        export default CustomTextField;",["73","74"],"/home/johnc/Projects/RealTutorMERN/client/src/components/general/LeftDrawer.js",["75"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { Typography } from '@material-ui/core';\n\nconst LeftDrawer = (props) => {\n  \n  const drawerWidth = 300;\n  \n  const useStyles = makeStyles(theme => ({\n    leftNavPaper: {\n      backgroundColor: theme.palette.leftNav,\n      height: \"100%\",\n      width: drawerWidth\n    },\n    button: {\n      marginLeft: 5,\n      marginRight: 5\n    },\n    drawer: {\n      width: drawerWidth,\n      zIndex: 0\n    },\n    drawerPaper: {\n      width: drawerWidth,\n    },\n    icon: {\n      color: theme.palette.divBackground\n    },\n    text: {\n      color: theme.palette.lightText\n    },\n    appBar: {\n      zIndex: theme.zIndex.drawer + 1,\n    },\n    toolbar: {\n      overflow: \"auto\"\n    }\n  }));\n  \n  const classes = useStyles();\n\n  return (\n    <div>\n    <AppBar position=\"fixed\" className={classes.appBar}>\n    <Toolbar>\n    <Typography variant=\"h6\" noWrap>\n    Real Tutor\n    </Typography>\n    </Toolbar>\n    </AppBar>\n    <Drawer\n    className={classes.drawer}\n    variant=\"permanent\"\n    classes={{\n      paper: classes.drawerPaper,\n    }}\n    >\n    <Toolbar />\n    <div className={classes.drawerContainer}>\n    <List>\n\n    <ListItem button key={0} onClick={() => props.changeState(0)}>\n    <ListItemIcon><InboxIcon /></ListItemIcon>\n    <ListItemText primary={\"Dashboard\"} />\n    </ListItem>\n\n    <ListItem button key={1} onClick={() => props.changeState(1)}>\n    <ListItemIcon><InboxIcon /></ListItemIcon>\n    <ListItemText primary={\"View lessons\"} />\n    </ListItem>\n\n    <ListItem button key={2} onClick={() => props.changeState(2)}>\n    <ListItemIcon><InboxIcon /></ListItemIcon>\n    <ListItemText primary={\"View progress\"} />\n    </ListItem>\n\n    <ListItem button key={3} onClick={() => props.changeState(3)}>\n    <ListItemIcon><InboxIcon /></ListItemIcon>\n    <ListItemText primary={\"Plan lesson\"} />\n    </ListItem>\n\n    <ListItem button key={4} onClick={() => props.changeState(4)}>\n    <ListItemIcon><InboxIcon/></ListItemIcon>\n    <ListItemText primary={\"Add report\"} />\n    </ListItem>\n\n    </List>\n    \n    </div>\n    </Drawer>\n    </div>\n    );\n    \n  }\n  \n  export default LeftDrawer;","/home/johnc/Projects/RealTutorMERN/client/src/components/FeatureComponents/PlanLesson.js",["76"],"import React, { useState, useEffect } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport { Typography } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\n\nimport Select from 'react-select'\n\nimport DateMomentUtils from '@date-io/date-fns';\nimport {\n    DateTimePicker,\n    MuiPickersUtilsProvider,\n} from '@material-ui/pickers';\n\nconst PlanLesson = () => {\n    \n    const [selectedDate, handleDateChange] = useState(new Date());\n    const [points, setPoints] = useState([]);\n    const [plan, setPlan] = useState(\"\");\n    const [selectedPoints, setSelectedPoints] = useState([]);\n    \n    useEffect(() => {\n        getSpecPoints();\n    }, []);\n    \n    const getSpecPoints = async () => {\n        \n        const queryString = window.location.search;\n        const urlParams = new URLSearchParams(queryString);\n        \n        const response = await fetch(\"/spec/getspecfromstudentid?studentid=\" + urlParams.get('studentid'), {\n            method: \"GET\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            credentials: 'include'\n        });\n        \n        const data = await response.json();\n        \n        let formattedPoints = [];\n        for (let point of data) {\n            formattedPoints.push({value: point._id, label: point.content});\n        }\n        \n        setPoints(formattedPoints);\n        \n    }\n    \n    const submitLesson = async (event) => {\n        \n        //StudentID, TutorID, plan, specPoints, date\n        \n        event.preventDefault();\n        \n        const queryString = window.location.search;\n        const urlParams = new URLSearchParams(queryString);\n        const studentid = urlParams.get('studentid');\n        \n        const response = await fetch(\"/accounts/getid\", {\n            method: \"GET\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            credentials: 'include'\n        });\n        \n        const data = await response.json();\n        const tutorid = data.id;\n        const date = Math.floor(new Date(selectedDate).getTime() / 1000);\n        \n        let formattedpoints = [];\n        for (let p of selectedPoints) formattedpoints.push(p.value);\n        \n        const body = {date: date, plan: plan, studentid: studentid, tutorid: tutorid, specPoints: formattedpoints};\n        \n        const saveLesson = await fetch(\"/accounts/addlesson\", {\n            method: \"POST\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            credentials: 'include',\n            body: JSON.stringify(body)\n        });\n        \n        const saveLessonResponse = await saveLesson.json();\n        \n        if (saveLessonResponse.error != undefined) {\n            //something?\n        } else {\n            document.location.href = \"studentdashboard?studentid=\" + studentid;\n        }\n        \n    }\n    \n    const planChange = (event) => {\n        setPlan(event.target.value);\n    }\n    \n    const useStyles = makeStyles(theme => ({\n        lessonsWrapper: {\n            width: \"90%\",\n            height: \"95%\",\n            marginLeft: \"5%\",\n            display: \"flex\",\n            justifyContent: \"center\"\n        },\n        multiLineInput: {\n            width: \"90%\",\n            leftMargin: \"5%\",\n            marginBottom: 10\n        },\n        inputBox: {\n            paddingLeft: 10,\n            paddingRight: 10,\n            paddingTop: 10,\n            paddingBottom: 10\n        },\n        gridItem: {\n            marginTop: 10,\n            marginBottom: 10\n        },\n        button: {\n            width: \"50%\"\n        }\n    }));\n    \n    const customTheme = (theme) => {\n        return {\n            ...theme,\n            colors: {\n                ...theme.colors,\n                primary: '#009688',\n                primary25: '#b2dfdb',\n                primary50: '#80cbc4'\n            }\n        }\n    }\n    \n    const classes = useStyles();\n    \n    return (\n        \n        <form onSubmit={submitLesson}>\n        <Grid container spacing={3} className={classes.lessonsWrapper}>\n        <Grid item lg={8} md={12}>\n        <Paper elevation={2} className={classes.inputBox}>\n        \n        <Typography variant=\"h2\">Lesson Planning</Typography>\n        <TextField label=\"plan\" placeholder=\"This is plan\" multiline \n        rows={3} variant=\"outlined\" className={classes.multiLineInput} onBlur={planChange} />\n        <Divider />\n        \n        <Typography variant=\"h2\">Date and Time</Typography>\n        <MuiPickersUtilsProvider utils={DateMomentUtils}>\n        <DateTimePicker onChange={handleDateChange} style={{width: \"50%\"}} inputVariant=\"outlined\" />\n        </ MuiPickersUtilsProvider>\n        \n        <Divider className={classes.gridItem} />\n        \n        <Button type=\"submit\" variant=\"contained\" color=\"primary\" className={classes.button}>Submit plan</Button>\n        \n        </Paper>\n        </Grid>\n        <Grid item lg={4} md={12}>\n        \n        \n        <Paper className={classes.inputBox}>\n        <Typography variant=\"h3\">Select planned spec points</Typography>\n        <Select options={points} theme={customTheme} isMulti name=\"Specification points\" onChange={setSelectedPoints}/>\n        </Paper>\n        \n        </Grid>\n        </Grid>\n        </form>\n        \n        )\n    }\n    \n    export default PlanLesson;","/home/johnc/Projects/RealTutorMERN/client/src/components/FeatureComponents/Dashboard.js",[],"/home/johnc/Projects/RealTutorMERN/client/src/components/FeatureComponents/AddReport.js",["77","78","79","80","81"],"import React, { useState, useEffect } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport { Typography } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport ReactSelect from 'react-select'\n\nconst AddReport = () => {\n    \n    const [lessons, setLessons] = useState([]);\n    const [selectedLesson, setSelectedLesson] = useState({empty: true});\n    \n    const [auth, setAuth] = useState({empty: true});\n    const [points, setPoints] = useState([]);\n    const [report, setReport] = useState(\"\");\n    const [selectedPoints, setSelectedPoints] = useState([]);\n    \n    useEffect(() => {\n        getSpecPoints();\n        getLessons();\n    }, []);\n    \n    const getSpecPoints = async () => {\n        \n        const queryString = window.location.search;\n        const urlParams = new URLSearchParams(queryString);\n        \n        const response = await fetch(\"/spec/getspecfromstudentid?studentid=\" + urlParams.get('studentid'), {\n            method: \"GET\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            credentials: 'include'\n        });\n        \n        const data = await response.json();\n        \n        let formattedPoints = [];\n        for (let point of data) {\n            formattedPoints.push({value: point._id, label: point.content});\n        }\n        \n        setPoints(formattedPoints);\n        \n    }\n    \n    const getLessons = async () => {\n        \n        const queryString = window.location.search;\n        const urlParams = new URLSearchParams(queryString);\n        \n        const response = await fetch(\"/accounts/getstudentlessons?studentid=\" + urlParams.get('studentid'), {\n            method: \"GET\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            credentials: 'include'\n        });\n        \n        const data = await response.json();\n        let newData = [];\n        for (let lesson of data) {\n            if (lesson.report == undefined) {\n                newData.push(lesson);\n            }\n        }\n        \n        setLessons(newData);\n        \n    }\n    \n    const submitLesson = async (event) => {\n        \n        //StudentID, TutorID, plan, specPoints, date\n        \n        const queryString = window.location.search;\n        const urlParams = new URLSearchParams(queryString);\n        const studentid = urlParams.get('studentid');\n        \n        event.preventDefault();\n        \n        let formattedpoints = [];\n        for (let p of selectedPoints) formattedpoints.push(p.value);\n        \n        const body = {lessonID: selectedLesson, report: report, specPointsAchieved: formattedpoints};\n        \n        const saveLesson = await fetch(\"/accounts/addlessonreport\", {\n            method: \"POST\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            credentials: 'include',\n            body: JSON.stringify(body)\n        });\n        \n        const saveLessonResponse = await saveLesson.json();\n        \n        if (saveLessonResponse.error != undefined) {\n            //something?\n        } else {\n            document.location.href = \"studentdashboard?studentid=\" + studentid;\n        }\n        \n    }\n    \n    const reportChange = (event) => {\n        setReport(event.target.value);\n    }\n    \n    const lessonSelect = (event) => {\n        setSelectedLesson(event.target.value);\n    }\n    \n    const useStyles = makeStyles(theme => ({\n        lessonsWrapper: {\n            width: \"90%\",\n            height: \"95%\",\n            marginLeft: \"5%\",\n            display: \"flex\",\n            justifyContent: \"center\"\n        },\n        multiLineInput: {\n            width: \"90%\",\n            leftMargin: \"5%\",\n            marginBottom: 10\n        },\n        inputBox: {\n            paddingLeft: 10,\n            paddingRight: 10,\n            paddingTop: 10,\n            paddingBottom: 10\n        },\n        gridItem: {\n            marginTop: 10,\n            marginBottom: 10\n        },\n        button: {\n            width: \"50%\"\n        },\n        dropdown: {\n            width: \"50%\"\n        },\n        divider: {\n            marginTop: 10,\n            marginBottom: 10,\n        }\n    }));\n    \n    const customTheme = (theme) => {\n        return {\n            ...theme,\n            colors: {\n                ...theme.colors,\n                primary: '#009688',\n                primary25: '#b2dfdb',\n                primary50: '#80cbc4'\n            }\n        }\n    }\n    \n    const classes = useStyles();\n    \n    return (\n\n        <form onSubmit={submitLesson}>\n        <Grid container spacing={3} className={classes.lessonsWrapper}>\n        <Grid item lg={8} md={12}>\n        <Paper elevation={2} className={classes.inputBox}>\n\n        <Typography variant=\"h2\">Add report</Typography>\n        <Divider className={classes.divider} />\n\n        <Typography variant=\"h3\">Select lesson</Typography>\n        <FormControl className={classes.dropdown} variant=\"outlined\">\n        <InputLabel id=\"select-lesson\">Select lesson</InputLabel>\n        <Select labelId=\"Select lesson\" id=\"lesson report\" labelId=\"select-lesson\" \n        value={selectedLesson.date} label=\"Select lesson\" onChange={lessonSelect}>\n        \n        {lessons.map(lesson => (\n            <MenuItem key={lesson._id} value={lesson._id}>{new Date(lesson.date * 1000).toDateString()}</MenuItem>\n        ))}\n            \n            </Select>\n            </FormControl>\n            \n            <Divider className={classes.divider} />\n\n            <Typography variant=\"h3\">Lesson Report</Typography>\n            <TextField label=\"Add lesson report\" placeholder=\"Add lesson report\" multiline \n            rows={3} variant=\"outlined\" className={classes.multiLineInput} onBlur={reportChange} />\n            \n            <Divider className={classes.gridItem} />\n            \n            <Button type=\"submit\" variant=\"contained\" color=\"primary\" className={classes.button}>Submit Report</Button>\n            \n            </Paper>\n            </Grid>\n\n            <Grid item lg={4} md={12}>\n            \n            <Paper className={classes.inputBox}>\n            <Typography variant=\"h3\">Select achieved spec points</Typography>\n            <ReactSelect options={points} theme={customTheme} isMulti name=\"Specification points\" onChange={setSelectedPoints}/>\n            </Paper>\n\n            </Grid>\n            </Grid>\n            </form>\n            \n            )\n        }\n        \n        \n        export default AddReport;","/home/johnc/Projects/RealTutorMERN/client/src/components/FeatureComponents/Progress.js",["82"],"import React, { useState, useEffect } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper'\n\nconst Progress = () => {\n    \n    const [rows, setRows] = useState([]);\n    \n    useEffect(() => {\n        getStudentPoints();\n    }, []);\n    \n    \n    const getStudentPoints = async () => {\n        \n        const queryString = window.location.search;\n        const urlParams = new URLSearchParams(queryString);\n        \n        const response = await fetch(\"/accounts/getstudentpoints?studentid=\" + urlParams.get('studentid'), {\n            method: \"GET\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            credentials: 'include'\n        });\n        \n        const data = await response.json();\n        console.log(data);\n        \n        let dataRows = [];\n        for (let point of data) {\n            dataRows.push(createData(point.content, new Date(point.date * 1000).toDateString(\"en-UK\"), point._id));\n        }\n        setRows(dataRows);\n        \n    }\n    \n    const createData = (content, date, status) => {\n        return {content, date, status};\n    }\n    \n    const useStyles = makeStyles(theme => ({\n        studentBoxWrapper: {\n            width: \"90%\",\n            marginTop: 50,\n            marginLeft: \"5%\"\n        },\n        studentBox: {\n            display: \"flex\",\n            flexDirection: \"column\"\n        }\n    }));\n    \n    const classes = useStyles();\n    \n    return (\n        \n        \n        <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead>\n        <TableRow>\n        <TableCell>Spec point</TableCell>\n        <TableCell>Date Reviewed</TableCell>\n        <TableCell>Status</TableCell>\n        </TableRow>\n        </TableHead>\n        <TableBody>\n        {rows.map((row) => (\n            <TableRow key={row.name}>\n            <TableCell>{row.content}</TableCell>\n            <TableCell>{row.date}</TableCell>\n            <TableCell>{row.status}</TableCell>\n            </TableRow>\n            ))}\n            </TableBody>\n            </Table>\n            </TableContainer>\n            );\n        }\n        \n        export default Progress;","/home/johnc/Projects/RealTutorMERN/client/src/components/FeatureComponents/StudentLessons.js",["83"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst StudentLessons = () => {\n    \n    const [rows, setRows] = useState([]);\n\n    useEffect(() => {\n        getLessons();\n    }, []);\n    \n    const getLessons = async () => {\n        \n        const queryString = window.location.search;\n        const urlParams = new URLSearchParams(queryString);\n        \n        const response = await fetch(\"/accounts/getstudentlessons?studentid=\" + urlParams.get('studentid'), {\n            method: \"GET\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            credentials: 'include'\n        });\n        \n        const data = await response.json();\n\n        let lessons = [];\n        for (let lesson of data) {\n\n            let specPoints = [];\n            for (let point of lesson.specPoints) {\n                specPoints.push(point.content);\n            }\n\n            let specPointsAchieved = [];\n            for (let point of lesson.specPointsAchieved) {\n                specPointsAchieved.push(point.content);\n            }\n\n            lessons.push(createData(lesson._id, lesson.title, lesson.plan, specPoints, lesson.report, specPointsAchieved, lesson.date));\n\n        }\n        \n        setRows(lessons);\n\n    }\n    \n    const createData = (_id, title, plan, specPoints, report, specPointsAchieved, date) => {\n        return {_id, title, plan, specPoints, report, specPointsAchieved, date};\n    }\n\n    const useStyles = makeStyles(theme => ({\n        table: {\n            minWidth: 650,\n        }\n    }));\n    \n    const classes = useStyles();\n    \n    return (\n        \n        <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead>\n        <TableRow>\n        <TableCell>Title</TableCell>\n        <TableCell>Plan</TableCell>\n        <TableCell>Specification Points</TableCell>\n        <TableCell>Report</TableCell>\n        <TableCell>Achieved Specification Points</TableCell>\n        <TableCell style={{ width: 150 }}>Date</TableCell>\n        </TableRow>\n        </TableHead>\n        <TableBody>\n        {rows.map((row) => (\n            <TableRow key={row._id}>\n            <TableCell component=\"th\" scope=\"row\">{row.title}</TableCell>\n            <TableCell>{row.plan}</TableCell>\n\n            <TableCell><ul>{row.specPoints.map((point) => (<li>{point}</li>))}</ul></TableCell>\n\n            <TableCell>{row.report}</TableCell>\n\n            <TableCell><ul>{row.specPointsAchieved.map((point) => (<li>{point}</li>))}</ul></TableCell>\n\n            <TableCell>{new Date(row.date * 1000).toDateString(\"en-UK\")}</TableCell>\n            </TableRow>\n            ))}\n            </TableBody>\n            </Table>\n            </TableContainer>\n            \n            );\n            \n        }\n        \n        export default StudentLessons;","/home/johnc/Projects/RealTutorMERN/client/src/components/pages/Login.js",[],"/home/johnc/Projects/RealTutorMERN/client/src/components/general/Progress.js",[],"/home/johnc/Projects/RealTutorMERN/client/src/components/general/Lessons.js",[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":3,"column":22,"nodeType":"90","messageId":"91","endLine":3,"endColumn":36},{"ruleId":"84","replacedBy":"92"},{"ruleId":"86","replacedBy":"93"},{"ruleId":"88","severity":1,"message":"94","line":6,"column":8,"nodeType":"90","messageId":"91","endLine":6,"endColumn":15},{"ruleId":"95","severity":1,"message":"96","line":95,"column":38,"nodeType":"97","messageId":"98","endLine":95,"endColumn":40},{"ruleId":"88","severity":1,"message":"99","line":21,"column":12,"nodeType":"90","messageId":"91","endLine":21,"endColumn":16},{"ruleId":"88","severity":1,"message":"100","line":21,"column":18,"nodeType":"90","messageId":"91","endLine":21,"endColumn":25},{"ruleId":"95","severity":1,"message":"101","line":73,"column":31,"nodeType":"97","messageId":"98","endLine":73,"endColumn":33},{"ruleId":"95","severity":1,"message":"96","line":109,"column":38,"nodeType":"97","messageId":"98","endLine":109,"endColumn":40},{"ruleId":"102","severity":1,"message":"103","line":187,"column":60,"nodeType":"104","endLine":187,"endColumn":83},{"ruleId":"105","severity":1,"message":"106","line":18,"column":8,"nodeType":"107","endLine":18,"endColumn":10,"suggestions":"108"},{"ruleId":"105","severity":1,"message":"109","line":18,"column":8,"nodeType":"107","endLine":18,"endColumn":10,"suggestions":"110"},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"no-unused-vars","'createMuiTheme' is defined but never used.","Identifier","unusedVar",["111"],["112"],"'Divider' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'auth' is assigned a value but never used.","'setAuth' is assigned a value but never used.","Expected '===' and instead saw '=='.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getStudentPoints'. Either include it or remove the dependency array.","ArrayExpression",["113"],"React Hook useEffect has a missing dependency: 'getLessons'. Either include it or remove the dependency array.",["114"],"no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},"Update the dependencies array to be: [getStudentPoints]",{"range":"119","text":"120"},"Update the dependencies array to be: [getLessons]",{"range":"121","text":"122"},[605,607],"[getStudentPoints]",[602,604],"[getLessons]"]